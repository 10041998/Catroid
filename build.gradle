import java.util.regex.Pattern

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.6.+'
	//classpath 'com.puppycrawl.tools:checkstyle:5.6'
    }
}

repositories{
    mavenLocal()
    mavenCentral()
}

apply plugin: 'android'

ext.catroid_version = "0.9.6"

dependencies {
    compile 'com.actionbarsherlock:actionbarsherlock:4.4.0@aar'
    compile 'com.android.support:support-v4:18.0.+'
    compile fileTree(dir: 'catroid/libs', include: '*.jar')
    compile fileTree(dir: 'catroid/libs-natives', include: '*.jar')

    instrumentTestCompile fileTree(dir: 'catroidTest/libs', include: '*.jar')
    
}


def getVersionCode = { ->
    def code = project.hasProperty('versionCode') ? versionCode.toInteger() : -1
    return code
}

def getVersionName = { ->
    def code = getVersionCode
    def versionName = "$ext.catroid_version.$code"
    println "VersionCode is set to $code"
    println "VersionName is set to $versionName"
    return versionName
}

def gitDescribe() {
    return 'git describe --tags'.execute().text.trim()
}


android {
    compileSdkVersion 18
    buildToolsVersion "18.0.1"

    defaultConfig {
        minSdkVersion 10
        targetSdkVersion 18
	packageName "org.catrobat.catroid"
	testPackageName "org.catrobat.catroid.test"
	testInstrumentationRunner "pl.polidea.instrumentation.PolideaInstrumentationTestRunner"
	versionCode getVersionCode()
	versionName getVersionName()
	buildConfig """\
            public static final String GIT_DESCRIBE = "${gitDescribe()}";
        """
    }

    sourceSets {
        main {
            manifest.srcFile 'catroid/AndroidManifest.xml'
            java.srcDirs = ['catroid/src']
            resources.srcDirs = ['catroid/src']
            aidl.srcDirs = ['catroid/src']
            renderscript.srcDirs = ['catroid/src']
            res.srcDirs = ['catroid/res']
            assets.srcDirs = ['catroid/assets']
        }

        instrumentTest {
            java.srcDirs = ['catroidTest/src']
            resources.srcDirs = ['catroidTest/src']
            aidl.srcDirs = ['catroidTest/src']
            renderscript.srcDirs = ['catroidTest/src']
            res.srcDirs = ['catroidTest/res']
            assets.srcDirs = ['catroidTest/assets']
        }

    }
}

task jenkins() << {
    android.buildTypes.each { type ->
	if(type.name == "debug") {
        	type.packageNameSuffix = ".jenkinsdebug"
        	type.versionNameSuffix = "-jenkins-$type.name"
	}
    }
}

task testManifestHack() << {
    def origManifest = file('catroidTest/AndroidManifest.xml')
    def generatedManifest = file("build/manifests/test/AndroidManifest.xml")
    def origContent = origManifest.getText()
    def generatedContent = generatedManifest.getText()
    def pattern = Pattern.compile("<application.*?>.*?</application>", Pattern.DOTALL)
    def matcher = pattern.matcher(origContent)
    matcher.find()
    origContent =  matcher.group()
    generatedContent = pattern.matcher(generatedContent).replaceAll(origContent)
    generatedManifest.write(generatedContent)
}

gradle.projectsEvaluated {
    generateTestBuildConfig.dependsOn testManifestHack
}

def signing_config_file = file(System.getProperty("user.home") + "/catroid_signing_config.gradle")
if(signing_config_file.exists()) {
    apply from: signing_config_file.absolutePath
}
